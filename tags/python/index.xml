<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Sam Taylor</title>
    <link>https://darkfunction.github.io/tags/python/</link>
    <description>Recent content in Python on Sam Taylor</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-gb</language>
    <lastBuildDate>Wed, 12 Sep 2018 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://darkfunction.github.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Datascience: Genetically evolved ELO parameters for bet profitability in tennis</title>
      <link>https://darkfunction.github.io/posts/elo-tennis/</link>
      <pubDate>Wed, 12 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/elo-tennis/</guid>
      <description>I wrote a function to genetically evolve the parameters to an ELO algorithm (code not included here) and compared the performance of these parameters across bookmakers when using the ELO prediction to place hypothetical bets. Interestingly there is a tiny advantage if you can secure the absolute best odds. The underdogs with higher ELO looks too good to be true and that&amp;rsquo;s because the number of available bets where an underdog has a higher ELO is very small.</description>
    </item>
    
    <item>
      <title>Datascience: WTA Height Advantages</title>
      <link>https://darkfunction.github.io/posts/wtaheightadv/</link>
      <pubDate>Tue, 11 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/wtaheightadv/</guid>
      <description>I&amp;rsquo;ve been playing with Pandas and the Jupyter Notebook to learn how to clean up and extract insights from large datasets. Here&amp;rsquo;s an example of discovering the relationship between player height and win %.
What advantage does height infer in Women&amp;rsquo;s Tennis? Using dataset: https://www.kaggle.com/joaoevangelista/wta-matches-and-rankings#wta.zip
import pandas as pd %matplotlib inline import matplotlib.pyplot as plt df = pd.read_csv(&#39;/Users/sam/Downloads/wta/matches.csv&#39;, low_memory=False, dtype={ }) df.shape  (50577, 33)  df.head()   .</description>
    </item>
    
    <item>
      <title>Identifying cryptrocurrency spam/hype cycles on Twitter</title>
      <link>https://darkfunction.github.io/posts/cointweets/</link>
      <pubDate>Sat, 08 Sep 2018 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/cointweets/</guid>
      <description>Inspired by a very interesting Defcon presentation about stock spammers from 2011, I thought it would be interesting (and maybe profitable?) to monitor the frequency of low-cap cryptocurrency mentions on Twitter, the theory being that pump groups and spammers are likely to &amp;lsquo;hype&amp;rsquo; coins before/during large buys in order to manipulate more people into buying.
The free tier on the Twitter streaming API allows you to monitor 400 different terms so I chose to observe the Twitter stock symbol &amp;lsquo;$&amp;rsquo; followed by the coin abbreviations, for example $SIA is Siacoin.</description>
    </item>
    
    <item>
      <title>French verbs crossword</title>
      <link>https://darkfunction.github.io/posts/crossword/</link>
      <pubDate>Tue, 27 Mar 2018 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/crossword/</guid>
      <description>Added a crossword section to VerbeDuJour for practicing the memorisation of infinitives.
Below is the Typescript utility which takes an array of answers and compresses them into a crossword table with as many crossover points as possible. This allows the site to dynamically generate crosswords every month from daily verbs.
function createTable(tableData) { var table = document.createElement(&#39;table&#39;); var tableBody = document.createElement(&#39;tbody&#39;); tableData.forEach(function(rowData) { var row = document.createElement(&#39;tr&#39;); rowData.forEach(function(cellData) { var cell = document.</description>
    </item>
    
    <item>
      <title>Verbe Du Jour online!</title>
      <link>https://darkfunction.github.io/posts/verbedujour/</link>
      <pubDate>Tue, 13 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/verbedujour/</guid>
      <description>I&amp;rsquo;ve hacked together a new site in Flask to assist with learning French. The idea is that a new verb is chosen every day, and users are able to see all conjugations as well as search for other verbs. It has been great using Flask- it takes (almost) all of the pain out of web development. Definitely recommended! Clicky click: Learn French and Conjugate Your Verbs!
Edit Been getting really good feedback over at Duolingo and Reddit, it&amp;rsquo;s really encouraging.</description>
    </item>
    
    <item>
      <title>Casino fairness testing</title>
      <link>https://darkfunction.github.io/posts/casinofairnesstesting/</link>
      <pubDate>Sat, 13 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/casinofairnesstesting/</guid>
      <description>Been playing around with Sikuli for automating a slots game and outputting the results to a simple Google Charts page on a local webserver. Got it running under Crunchbang and threw some machines up. Sikuli is a really good framework (maybe the best for multi-purpose Linux automation?), and while the fuzzy image search is a real time saver, it sucks at differentiating between colours. If two images are the same in all aspects except colour, it&amp;rsquo;s unreliable, and you need to start comparing pixels manually with java.</description>
    </item>
    
    <item>
      <title>Painting with genetic algorithms</title>
      <link>https://darkfunction.github.io/posts/polypainter/</link>
      <pubDate>Sun, 28 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://darkfunction.github.io/posts/polypainter/</guid>
      <description>Using genetic algorithms to build images from layers of translucent polygons.
Inspired by this and also this.
Just learning Python! The code is here: https://github.com/darkFunction/PolygonPainter.
The old_painter directory contains an non-breeding strategy in which a single entity or &amp;lsquo;artist&amp;rsquo; is mutated according to a set of weightings, and un-mutated if the fitness is worse than it was before the change. This is similar to the Mona Lisa implementation linked above.</description>
    </item>
    
  </channel>
</rss>